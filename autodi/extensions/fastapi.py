from __future__ import annotations

from collections.abc import Awaitable, Callable

from fastapi import FastAPI, Request, Response

from ..container import Container
from ..scopes import Scope


def setup_dependency_injection(app: FastAPI, container: Container) -> None:
    """Sets up DI middleware for a FastAPI application.

    This middleware manages the lifecycle of 'request' scoped dependencies,
    creating a new scope for each incoming HTTP request.

    Args:
        app: The FastAPI application instance.
        container: The autodi container instance.
    """

    @app.middleware("http")
    async def di_middleware(
        request: Request, call_next: Callable[[Request], Awaitable[Response]]
    ) -> Response:
        """FastAPI middleware to enter and exit the REQUEST scope.

        Args:
            request: The incoming request.
            call_next: The next middleware or endpoint in the chain.

        Returns:
            The response generated by the application.
        """
        async with container.enter_scope_async(Scope.REQUEST):
            return await call_next(request)
